class Solution {
    public int longestMonotonicSubarray(int[] nums) {
        
        int ilen =1;
        int dlen =1;
        
        int res =1;
        
        for(int i=1; i<nums.length; i++){
            
            if(nums[i] > nums[i-1]  ){
              ilen++;
              dlen =1; 
                
            } else if(nums[i] < nums [i-1]){
                dlen++;  
                ilen =1;
                
            } else{
                ilen =1;
                dlen =1;
                
            }
             res = Math.max(res, Math.max(ilen, dlen));
            
        }
        
          
        
        return res;
        
    }
}









// public int longestMonotonicSubarray(int[] arr) {
// 	int res = 1, n=arr.length;
// 	for(int i=0; i<n-1; i++){
// 		if(arr[i] == arr[i+1]) continue;
// 		boolean flag = arr[i]<arr[i+1];
// 		int j=i+1;
// 		while(j < n-1){
// 			if(flag) {
// 				if(arr[j] < arr[j+1]) j++;
// 				else break;
// 			} else {
// 				if(arr[j] > arr[j+1]) j++;
// 				else break;
// 			}
// 		}

// 		res = Math.max(res, j-i+1);
// 	}

// 	return res;
// }







// class Solution {
//     public int longestMonotonicSubarray(int[] nums) {
//         int maxLength = 1;
//         int incLength = 1;
//         int decLength = 1;
//         for(int i = 1; i < nums.length; i++) {
//             if(nums[i] > nums[i - 1]) {
//                 incLength++;
//                 decLength = 1;
//             } else if(nums[i] < nums[i - 1]) {
//                 decLength++;
//                 incLength = 1;
//             } else {
//                 incLength = 1;
//                 decLength = 1;
//             }
//             maxLength = Math.max(maxLength, Math.max(incLength, decLength));
//         }
//         return maxLength;
//     }
// }
